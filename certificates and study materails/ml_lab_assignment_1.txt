"""
Created by - Kanjal Dalal (BTECH/10350/18), CSE A
ML LAB ASSIGNMENT 1.
"""
import pandas as pd
import numpy as np

data = { 'animal': ['cat', 'cat', 'snake', 'dog', 'dog', 'cat', 'snake', 'cat', 'dog', 'dog'],
'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'priority': ['yes', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'no']
}

labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

#answer to question 1, creation of the df.
df = pd.DataFrame(data, index=labels)
print(df)
"""
OUTPUT - 
animal  age  visits priority
a    cat  2.5       1      yes
b    cat  3.0       3      yes
c  snake  0.5       2       no
d    dog  NaN       3      yes
e    dog  5.0       2       no
f    cat  2.0       3       no
g  snake  4.5       1       no
h    cat  NaN       1      yes
i    dog  7.0       2       no
j    dog  3.0       1       no
"""


#answer to question 2, summary of basic information
print(df.info())
print(df.describe())
"""
OUTPUT - 
<class 'pandas.core.frame.DataFrame'>
Index: 10 entries, a to j
Data columns (total 4 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   animal    10 non-null     object 
 1   age       8 non-null      float64
 2   visits    10 non-null     int64  
 3   priority  10 non-null     object 
dtypes: float64(1), int64(1), object(2)
memory usage: 400.0+ bytes
None
            age     visits
count  8.000000  10.000000
mean   3.437500   1.900000
std    2.007797   0.875595
min    0.500000   1.000000
25%    2.375000   1.000000
50%    3.000000   2.000000
75%    4.625000   2.750000
max    7.000000   3.000000
"""


#answer to question 3, Sort df first by the values in the 'age' in decending order, then by the value in the 'visit' column in ascending order.
df = df.sort_values(by=['age', 'visits'], ascending=[False, True])
print(df.sort_values(by=['age', 'visits'], ascending=[False, True]))
"""
OUTPUT - 
 animal  age  visits priority
i    dog  7.0       2       no
e    dog  5.0       2       no
g  snake  4.5       1       no
j    dog  3.0       1       no
b    cat  3.0       3      yes
a    cat  2.5       1      yes
f    cat  2.0       3       no
c  snake  0.5       2       no
h    cat  NaN       1      yes
d    dog  NaN       3      yes
"""


#answer to question 4, selecting just the animal and age colums
print(df[['animal', 'age']]) 
"""
OUTPUT - 
animal  age
i    dog  7.0
e    dog  5.0
g  snake  4.5
j    dog  3.0
b    cat  3.0
a    cat  2.5
f    cat  2.0
c  snake  0.5
h    cat  NaN
d    dog  NaN
"""


#answer to question 5, selecting the rows where age is missing
print(df[df['age'].isnull()])
"""
OUTPUT - 
animal  age  visits priority
h    cat  NaN       1      yes
d    dog  NaN       3      yes
"""


#answer to question 6, change snake entries to python
df['animal'] = df['animal'].replace('snake', 'python')
print(df)
"""
OUTPUT - 
 animal  age  visits priority
i     dog  7.0       2       no
e     dog  5.0       2       no
g  python  4.5       1       no
j     dog  3.0       1       no
b     cat  3.0       3      yes
a     cat  2.5       1      yes
f     cat  2.0       3       no
c  python  0.5       2       no
h     cat  NaN       1      yes
d     dog  NaN       3      yes
"""


#Q7 - You have a DataFrame df with a column 'A' of integers. filter out rows with same value as the row above You should be left with a column containing the following values: 1, 2, 3, 4, 5, 6, 7
df = pd.DataFrame({'A': [1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 7]})
print('initially\n',df)
df = df.loc[df['A'].shift() != df['A']]
print(df)
"""
OUTPUT - 
initially
    A
0   1
1   2
2   2
3   3
4   4
5   5
6   5
7   5
8   6
9   7
10  7
final output
   A
0  1
1  2
3  3
4  4
5  5
8  6
9  7
"""


"""
Q8 - Given a DataFrame of random numeric values:
df = pd.DataFrame(np.random.random(size=(5, 3))) # this is a 5x3 DataFrame of float values
how do you subtract the row mean from each element in the row?
"""
df = pd.DataFrame(np.random.random(size=(5, 3)))
print('initially random df\n',df)
df = df.sub(df.mean(axis=1), axis=0)
print('final after subtracting row mean\n',df)
"""
OUTPUT - 
initially random df
 0         1         2
0  0.403214  0.103529  0.263825
1  0.952615  0.825671  0.113615
2  0.692132  0.321944  0.359542
3  0.519019  0.010965  0.017357
4  0.882278  0.494953  0.949133
final after subtracting row mean
          0         1         2
0  0.146358 -0.153327  0.006969
1  0.321981  0.195038 -0.517019
2  0.234260 -0.135929 -0.098331
3  0.336572 -0.171482 -0.165090
4  0.106823 -0.280502  0.173679
"""


"""
Q9
Suppose you have DataFrame with 10 columns of real numbers, for example:
df = pd.DataFrame(np.random.random(size=(5, 10)), columns=list('abcdefghij'))
Which column of numbers has the smallest sum? Return that column's label.
"""
df = pd.DataFrame(np.random.random(size=(5, 10)), columns=list('abcdefghij'))
print('initial df\n',df)
print('sum of each col\n',df.sum())
print('label of col having min sum = ',df.sum().idxmin()) #prints the label of the column having min sum.
"""
OUTPUT - 
initial df
 a         b         c         d         e         f         g         h         i         j
0  0.875729  0.148302  0.807856  0.291314  0.154015  0.630094  0.416818  0.166479  0.501138  0.372709
1  0.158570  0.935385  0.409263  0.089762  0.418241  0.012924  0.468077  0.433247  0.318937  0.046336
2  0.395292  0.814402  0.773490  0.125597  0.420530  0.480991  0.015727  0.235408  0.568049  0.418201
3  0.420222  0.669970  0.838384  0.893785  0.981039  0.785945  0.557625  0.601318  0.094835  0.674152
4  0.367274  0.949331  0.508843  0.368198  0.265798  0.583945  0.881157  0.356347  0.529275  0.401807
sum of each col
a    2.217087
b    3.517390
c    3.337837
d    1.768656
e    2.239623
f    2.493899
g    2.339405
h    1.792799
i    2.012233
j    1.913205
dtype: float64
label of col having min sum = d
"""


"""
Q10
A DataFrame has a column of groups 'grps' and and column of integer values 'vals':
df = pd.DataFrame({'grps': list('aaabbcaabcccbbc'),
'vals': [12,345,3,1,45,14,4,52,54,23,235,21,57,3,87]})
For each group, find the sum of the three greatest values. You should end up with the answer as follows:
grps
a 409
b 156
c 345
"""
df = pd.DataFrame({'grps': list('aaabbcaabcccbbc'),'vals': [12,345,3,1,45,14,4,52,54,23,235,21,57,3,87]})
print(df)
df = df.sort_values('vals', ascending=False)
sum_of_three_greatest_of_each_group = df.groupby('grps')['vals'].nlargest(3).sum(level=0)
print(sum_of_three_greatest_of_each_group)
"""
OUTPUT - 
grps  vals
0     a    12
1     a   345
2     a     3
3     b     1
4     b    45
5     c    14
6     a     4
7     a    52
8     b    54
9     c    23
10    c   235
11    c    21
12    b    57
13    b     3
14    c    87
grps
a    409
b    156
c    345
Name: vals, dtype: int64
"""


"""
Q11
Consider a DataFrame df where there is an integer column 'X':
df = pd.DataFrame({'X': [7, 2, 0, 3, 4, 2, 5, 0, 3, 4]})
For each value, count the difference back to the previous zero (or the start of the Series, whichever is closer). These values should therefore be
[1, 2, 0, 1, 2, 3, 4, 0, 1, 2]
"""
df = pd.DataFrame({'X': [7, 2, 0, 3, 4, 2, 5, 0, 3, 4]})
print(df)
df['flag'] = np.where(df['X'] == 0, 0, 1)
df['cumsum'] = df['flag'].cumsum()
df['offset'] = df['cumsum']
df.loc[df.flag==1, 'offset'] = np.nan
df['offset'] = df['offset'].fillna(method='ffill').fillna(0).astype(int)
df['Y'] = df['cumsum'] - df['offset']
print(df)
df = df.drop(['flag','cumsum','offset'], axis=1) #removing the temp columns created.
print(df)
"""
   X
0  7
1  2
2  0
3  3
4  4
5  2
6  5
7  0
8  3
9  4
Name: X, dtype: int64
   X  flag  cumsum  offset  Y
0  7     1       1       0  1
1  2     1       2       0  2
2  0     0       2       2  0
3  3     1       3       2  1
4  4     1       4       2  2
5  2     1       5       2  3
6  5     1       6       2  4
7  0     0       6       6  0
8  3     1       7       6  1
9  4     1       8       6  2
   X  Y
0  7  1
1  2  2
2  0  0
3  3  1
4  4  2
5  2  3
6  5  4
7  0  0
8  3  1
9  4  2
"""


"""
Q12
You are given the DataFrame below with a column of group IDs, 'grps', and a column of corresponding integer values, 'vals'.
df = pd.DataFrame({"vals": np.random.RandomState(31).randint(-30, 30, size=15),
"grps": np.random.RandomState(31).choice(["A", "B"], 15)})
Create a new column 'patched_values' which contains the same values as the 'vals' any negative values in 'vals' with the group mean:
vals grps patched_vals
0 -12 A 13.6
1 -7 B 28.0
2 -14 A 13.6
3 4 A 4.0
4 -7 A 13.6
5 28 B 28.0
6 -2 A 13.6
7 -1 A 13.6
8 8 A 8.0
9 -2 B 28.0
10 28 A 28.0
11 12 A 12.0
12 16 A 16.0
13 -24 A 13.6
14 -12 A 13.6
"""
df = pd.DataFrame({"vals": np.random.RandomState(31).randint(-30, 30, size=15),"grps": np.random.RandomState(31).choice(["A", "B"], 15)})
print(df)
def replace(group):
    mask = group<0
    group[mask] = group[~mask].mean()
    return group
df['patched_vals'] = df.groupby(['grps'])['vals'].transform(replace)
print(df)
"""
 vals grps
0    -12    A
1     -7    B
2    -14    A
3      4    A
4     -7    A
5     28    B
6     -2    A
7     -1    A
8      8    A
9     -2    B
10    28    A
11    12    A
12    16    A
13   -24    A
14   -12    A
    vals grps  patched_vals
0    -12    A          13.6
1     -7    B          28.0
2    -14    A          13.6
3      4    A           4.0
4     -7    A          13.6
5     28    B          28.0
6     -2    A          13.6
7     -1    A          13.6
8      8    A           8.0
9     -2    B          28.0
10    28    A          28.0
11    12    A          12.0
12    16    A          16.0
13   -24    A          13.6
14   -12    A          13.6
"""